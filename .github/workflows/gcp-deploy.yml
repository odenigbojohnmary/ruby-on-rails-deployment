name: Build and Deploy to GKE

on:
  push:
    branches:
      - master

env:
  PROJECT_ID: ${{ secrets.GOOGLE_STAGING_PROJECT_ID }}         # The GCP Project ID
  GCR_LOCATION: ${{ secrets.GCR_LOCATION }}                    # The GCR registry location
  GKE_CLUSTER: ${{ secrets.GOOGLE_STAGING_CLUSTER_NAME }}      # The GKE Cluster Name
  GKE_ZONE: ${{ secrets.GOOGLE_STAGING_COMPUTE_ZONE }}       # The Project Zone                   
  REPOSITORY: ${{ secrets.DEPLOYMENT_NAME }}                          # The Repository name
  IMAGE: docker.io/odenigbojohnmary/bravado:final                       # The container image name and tag
  CHART_NAME: new-api-web                           # The Pchart name from helm-charts repo
  PROJECT_CREDENTIALS: ${{ secrets.GCP_STAGING_CREDENTIALS }}  # The GCP JSON Credentials 
  APPLICATION_HELM_VALUE: helm/app.yaml                            # The helm deployment directory 
  NAMESPACE: default                                           # The kubernetes namespace


jobs:
  setup:
    runs-on: ubuntu-latest
    environment: prod

    steps:
    - name: Checkout the code
      uses: actions/checkout@v2
      
    - name: Authenticate into the GCP
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ env.PROJECT_CREDENTIALS }}'
        project_id: ${{ env.PROJECT_ID }}
    
    - name: Build docker image and push to GCR 
      uses: docker/build-push-action@v2
    - run: docker build -t ${{ env.REPOSITORY }} --network=host .
    - run: docker tag ${{ env.REPOSITORY }} ${{ env.GCR_LOCATION }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}:final
    - run: gcloud auth configure-docker -q
    - run: docker push ${{ env.GCR_LOCATION }}/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}:final 
   
# SLACK NOTIFICATION FOR  BUILD STATUS

    # - name: Build Status
    #   uses: rtCamp/action-slack-notify@v2
    #   env:
    #     SLACK_CHANNEL: build-status
    #     SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
    #     SLACK_MESSAGE: Build > ${{ env.REPOSITORY }} | Result >  ${{ job.status }}
    #     SLACK_ICON: https://ibb.co/Qv01fmZ
    #     SLACK_TITLE: Build Status 
    #     SLACK_USERNAME: Github Actions
    #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    #     SLACK_FOOTER: ':rocket: :rocket: :rocket: :aww-yeah: :aww-yeah:'   
      
# DEPLOYMENT TO GKE 

  deploy:
    runs-on: ubuntu-latest
    environment: prod
    needs: setup
    steps:

    - name: checkout repo
      uses: actions/checkout@v2
    
# Authenticate into the GCP
    - name: Authenticate into the GCP
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ env.PROJECT_CREDENTIALS }}'
        project_id: ${{ env.PROJECT_ID }}

# AUTHENTICATING  INTO THE GKE CLUSTER  
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v0
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}

# PACKAGING THE HELMCHART FOR DEPLOYMENT
    - id: helm-packaging-and-deployment
      run: cd helm-chart && tar czf base-v1-0.1.0.tgz base-v1/

# DEPLOYING THE POSTGRESQL DB AND REDIS USING YAML FILE
    - run: kubectl apply -f .k8s

# DEPLOYING THE APPLICATION WITH HELMCHART
    - run: helm upgrade -i ${{ env.CHART_NAME }} helm-chart/base-v1-0.1.0.tgz --namespace ${{ env.NAMESPACE }} -f ${{ env.APPLICATION_HELM_VALUE }}
    # - run: helm upgrade -i ${{ env.REDIS_NAME }} base-chart-0.1.0.tgz --namespace ${{ env.NAMESPACE }} -f ${{ env.REDIS_HELM_VALUE }}


# SLACK NOTIFICATION FOR DEPLOYMENT STATUS

    # - name: Deployment Status
    #   uses: rtCamp/action-slack-notify@v2
    #   env:
    #     SLACK_CHANNEL: deployment-status
    #     SLACK_COLOR: ${{ job.status }} # or a specific color like 'good' or '#ff00ff'
    #     SLACK_MESSAGE: Deployed > ${{ env.REPOSITORY }} | Cluster >  ${{ env.GKE_CLUSTER }} | Result > ${{ job.status }}
    #     SLACK_ICON: https://ibb.co/Qv01fmZ
    #     SLACK_TITLE: Deployed Status
    #     SLACK_USERNAME: Github Actions
    #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    #     SLACK_FOOTER:  ':rocket: :rocket: :rocket: :aww-yeah: :aww-yeah:'
